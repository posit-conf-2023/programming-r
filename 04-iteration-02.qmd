---
title: "Iteration: Part 2"
format: revealjs
---

## Reading multiple files


## Saving multiple outputs

## Extras

There are three fundamental operations in functional programming:

Starting with a list:

 - `map()`: supply mapping-function to make a new list, element by element
 - `filter()`: supply predicate-function to make a new list, subset of old list
 - `reduce()`: supply reducing-function (and optional initial-value) to make a new "thing"

```{r}
library("tidyverse")

dpurrr_filter <- function(df, predicate) {
  df |>
    as.list() |>
    purrr::list_transpose(simplify = FALSE) |>
    purrr::keep(predicate) |>
    purrr::list_transpose() |>
    as.data.frame() 
}
```

```{r}
dpurrr_filter(mtcars, \(x) x$gear == 3)
```

```{r}
mtcars |> 
  group_nest(gear) |>
  purrr::pluck("data") |>
  purrr::reduce(rbind)
```

